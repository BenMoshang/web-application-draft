/*===================================================
     Mixins:
     Note: Mixins are reusable blocks of code that can be used to apply styles to elements.

     however they are different than global classes. Global classes are written once and compiled once.

     - think that mixins are a type of shorthand of a collection of properties. instead.
=================================================== */
@use "./_variables.scss" as *;
@use "./_functions.scss" as *;

@mixin paragraph-ch-inline {
  max-inline-size: 50ch;
}
/* ===============================================
                    Gradient Text
=============================================== */
@mixin gradient-text-light {
  background: linear-gradient(135deg, $color-standout-200, $color-standout-100);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin gradient-text {
  color: transparent;
  background: linear-gradient(135deg, $color-standout-500, $color-standout-600);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

/* ===============================================
                    Card Mixins
=============================================== */
@mixin card-styling {
  padding: $card-padding;
  border-radius: $br-default;
  background: $color-card-bg;
  box-shadow: $shadow-md;
  border: 0.0625rem solid $color-border;
  overflow: hidden;
}

@mixin card-border {
  border: 0.0625rem solid $color-border;
}

/* ===============================================
                    Section Mixins
=============================================== */

@mixin section-heading-content-gap {
  gap: $section-heading-content-gap;
}
@mixin section-inner-gap {
  gap: $section-inner-gap; /*24 px*/
}

@mixin section-padding-inline {
  padding-inline: $section-padding-inline;
}
/* ===============================================
                    Animations
=============================================== */
@mixin animation-bw-to-color {
  animation: filter-bw-to-color 2s ease-in-out forwards;
}

@mixin animation-float-and-replace {
  animation: icon-float-and-replace 0.5s ease-in-out forwards;
}
@mixin shine-animation {
  position: relative;

  // for shine
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 30%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.5),
      rgba(255, 255, 255, 0.75),
      rgba(255, 255, 255, 0.5),
      transparent
    );
    transform: skewX(-15deg);
    pointer-events: none;
    z-index: 2;
    animation: button-shine 6s ease-in-out infinite;
  }
}
@mixin shine-animation-text {
  position: relative;
  background: $text-primary;
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  // for shine
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 30%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.5),
      rgba(255, 255, 255, 0.75),
      rgba(255, 255, 255, 0.5),
      transparent
    );
    transform: skewX(-15deg);
    pointer-events: none;
    z-index: 2;
    animation: button-shine 4s ease-in-out infinite;
  }
}

/*===================================================
     Structured Mixins
=================================================== */
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
@mixin pseudo-element {
  content: "";
  position: absolute;
  inset: 0;
  margin: auto;
}
@mixin flex-space-evenly {
  display: flex;
  justify-content: space-evenly;
  align-items: center;
}
@mixin flex-center-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
@mixin flex-column-center {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
@mixin flex-column-jus-center {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

@mixin absolute-center {
  position: absolute;
  inset: 0;
  margin: auto;
}

/*===================================================
Vertigo Mixin
=================================================== */
/* Define the scroll timeline */
@scroll-timeline scroll-vertigo {
  source: auto;
  orientation: block;
  scroll-offsets: 0% 100%;
}

/* Mixin for vertigo effect bound to scroll */
@mixin vertigo-scroll(
  $perspective: 500px,
  $translateZ-start: 0,
  $translateZ-end: -200px,
  $scale-start: 1,
  $scale-end: 2
) {
  perspective: $perspective;
  transform-style: preserve-3d;

  animation-name: vertigo-animation;
  animation-duration: 1s; // Arbitrary duration; actual control via scroll
  animation-fill-mode: both;
  animation-timeline: scroll-vertigo;
  animation-timing-function: linear;

  @keyframes vertigo-animation {
    from {
      transform: translateZ(#{$translateZ-start}) scale(#{$scale-start});
    }
    to {
      transform: translateZ(#{$translateZ-end}) scale(#{$scale-end});
    }
  }
}
/*===================================================
fade under mixin
=================================================== */

@mixin scroll-fade-under(
  $fade-start: 0px,
  $fade-end: 200px,
  $translate-distance: 50px,
  $fade-color: #fff
) {
  position: relative;
  z-index: 1;
  background: inherit;

  /* Set up the scroll-linked animation */
  @property --scroll {
    syntax: "<number>";
    initial-value: 0;
    inherits: false;
  }
  --scroll: 0;

  /* Update --scroll based on scroll position */
  &::before {
    content: "";
    position: fixed;
    top: 0;
    height: 100vh;
    width: 1px;
    transform: translateY(calc(var(--scroll) * 1px));
    pointer-events: none;
  }

  /* Apply fade and translate effect */
  opacity: calc(
    1 - (var(--scroll) - #{$fade-start}) / (#{$fade-end} - #{$fade-start})
  );
  transform: translateY(
    calc(
      (var(--scroll) - #{$fade-start}) / (#{$fade-end} - #{$fade-start}) * -#{$translate-distance}
    )
  );

  /* Prevent values from exceeding bounds */
  @media (max-height: #{$fade-start}) {
    opacity: 1;
    transform: translateY(0);
  }
  @media (min-height: #{$fade-end}) {
    opacity: 0;
    transform: translateY(-#{$translate-distance});
  }

  /* Optional: Mask to create the underlapping effect */
  &::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    height: $translate-distance;
    background: linear-gradient(to top, $fade-color, transparent);
    pointer-events: none;
  }
}
/*===================================================
Parallax Mixins
=================================================== */

// Mixin 1: Simple Parallax Background
// Applies a fixed background image to create a parallax effect.
@mixin parallax-background($image, $height: 500px) {
  background: {
    image: url($image);
    repeat: no-repeat;
    position: center center;
    attachment: fixed;
    size: cover;
  }
  height: $height;
}

// Mixin 2: Parallax Section with Content Overlay
// Sets up a parallax background with content overlay.
@mixin parallax-section($image, $height: 500px) {
  position: relative;
  overflow: hidden;
  height: $height;
  z-index: 1;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    z-index: -1;
    background: {
      image: url($image);
      repeat: no-repeat;
      position: center center;
      size: cover;
      attachment: fixed;
    }
  }
}

// Usage Examples:

// Example 1: Applying a Simple Parallax Background
.parallax-section {
  @include parallax-background("path/to/your/image.jpg", 600px);
}

// Example 2: Parallax Section with Content Overlay
.parallax-content {
  @include parallax-section("path/to/your/image.jpg", 700px);
}

/*===================================================
     Typography
=================================================== */
/* Global Display style Mixin */
@mixin global__display {
  font-family: $ff-bold;
  font-weight: $fw-bold;
  color: $text-primary; /* #1d1d1f */
  letter-spacing: -0.05em;
  text-transform: capitalize;
  text-wrap: balance;
  line-height: $lh-xl;
}

/* Global Heading style Mixin */
@mixin global__heading {
  font-family: $ff-bold;
  font-weight: $fw-bold;
  color: $text-primary; /* #1d1d1f */
  letter-spacing: $ls-tight;
  text-transform: capitalize;
  line-height: $lh-lg;

  text-wrap: balance;
}
@mixin global__body {
  font-family: $ff-regular;
  color: $text-primary; /* #1d1d1f */
  line-height: $lh-md;
  letter-spacing: $ls-normal;
  text-wrap: pretty;
}
@mixin global__links {
  font-family: $ff-regular;
  color: $text-tertiary; /* #1d1d1f */
  line-height: $lh-md;
  letter-spacing: $ls-loose;
  text-wrap: pretty;
  font-size: $fsz-xs; /* 18px */
}
@mixin global__card-heading {
  font-family: $ff-bold;
  color: $text-primary; /* #1d1d1f */
  text-wrap: balance;
}

@mixin global__card-label {
  font-family: $ff-regular;
  font-weight: $fw-semibold;
  font-size: $fsz-2xs;
  line-height: $lh-lg;
  letter-spacing: $ls-loose;
  text-transform: capitalize;
  color: $color-tertiary;
}

// button mixin
@mixin global__button {
  cursor: pointer;
  text-transform: capitalize;
  font-family: $ff-regular;
  font-weight: $fw-bold;
  font-size: $fsz-button-lg;
  line-height: none;
  letter-spacing: $ls-loose;
  padding-block: 0.75em;
  padding-inline: 1.25em;
  inline-size: fit-content;
  border-radius: $br-rounded;
  position: relative;
  will-change: transform, box-shadow, background-color;
}

@mixin global__card-body {
  text-wrap: pretty;
  font-family: $ff-regular;
  font-weight: $fw-medium;
  line-height: $lh-md;
  letter-spacing: $ls-loose;
}
